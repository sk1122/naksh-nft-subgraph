// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bidding extends ethereum.Event {
  get params(): Bidding__Params {
    return new Bidding__Params(this);
  }
}

export class Bidding__Params {
  _event: Bidding;

  constructor(event: Bidding) {
    this._event = event;
  }

  get _nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class EndedAuction extends ethereum.Event {
  get params(): EndedAuction__Params {
    return new EndedAuction__Params(this);
  }
}

export class EndedAuction__Params {
  _event: EndedAuction;

  constructor(event: EndedAuction) {
    this._event = event;
  }

  get _nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get highestBID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SalePriceSet extends ethereum.Event {
  get params(): SalePriceSet__Params {
    return new SalePriceSet__Params(this);
  }
}

export class SalePriceSet__Params {
  _event: SalePriceSet;

  constructor(event: SalePriceSet) {
    this._event = event;
  }

  get _nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenFirstSale(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get saletype(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class Sold extends ethereum.Event {
  get params(): Sold__Params {
    return new Sold__Params(this);
  }
}

export class Sold__Params {
  _event: Sold;

  constructor(event: Sold) {
    this._event = event;
  }

  get _nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StartedAuction extends ethereum.Event {
  get params(): StartedAuction__Params {
    return new StartedAuction__Params(this);
  }
}

export class StartedAuction__Params {
  _event: StartedAuction;

  constructor(event: StartedAuction) {
    this._event = event;
  }

  get _nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NakshMarketplace__auctionDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }

  getStartTime(): BigInt {
    return this.value0;
  }

  getEndTime(): BigInt {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }

  getPrice(): BigInt {
    return this.value4;
  }

  getHighestBid(): BigInt {
    return this.value5;
  }

  getHighestBidder(): Address {
    return this.value6;
  }
}

export class NakshMarketplace__getBidHistoryResultValue0Struct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class NakshMarketplace__getNFTonSaleResultValue0Struct extends ethereum.Tuple {
  get nft(): NakshMarketplace__getNFTonSaleResultValue0NftStruct {
    return changetype<NakshMarketplace__getNFTonSaleResultValue0NftStruct>(
      this[0].toTuple()
    );
  }

  get isOnSale(): boolean {
    return this[1].toBoolean();
  }

  get tokenFirstSale(): boolean {
    return this[2].toBoolean();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get saletype(): i32 {
    return this[4].toI32();
  }
}

export class NakshMarketplace__getNFTonSaleResultValue0NftStruct extends ethereum.Tuple {
  get nftAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenUri(): string {
    return this[2].toString();
  }

  get title(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get artist(): NakshMarketplace__getNFTonSaleResultValue0NftArtistStruct {
    return changetype<
      NakshMarketplace__getNFTonSaleResultValue0NftArtistStruct
    >(this[5].toTuple());
  }

  get mintedBy(): i32 {
    return this[6].toI32();
  }
}

export class NakshMarketplace__getNFTonSaleResultValue0NftArtistStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get artistAddress(): Address {
    return this[1].toAddress();
  }

  get imageUrl(): string {
    return this[2].toString();
  }
}

export class NakshMarketplace__getSaleDataResultValue0Struct extends ethereum.Tuple {
  get nft(): NakshMarketplace__getSaleDataResultValue0NftStruct {
    return changetype<NakshMarketplace__getSaleDataResultValue0NftStruct>(
      this[0].toTuple()
    );
  }

  get isOnSale(): boolean {
    return this[1].toBoolean();
  }

  get tokenFirstSale(): boolean {
    return this[2].toBoolean();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get saletype(): i32 {
    return this[4].toI32();
  }
}

export class NakshMarketplace__getSaleDataResultValue0NftStruct extends ethereum.Tuple {
  get nftAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenUri(): string {
    return this[2].toString();
  }

  get title(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get artist(): NakshMarketplace__getSaleDataResultValue0NftArtistStruct {
    return changetype<NakshMarketplace__getSaleDataResultValue0NftArtistStruct>(
      this[5].toTuple()
    );
  }

  get mintedBy(): i32 {
    return this[6].toI32();
  }
}

export class NakshMarketplace__getSaleDataResultValue0NftArtistStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get artistAddress(): Address {
    return this[1].toAddress();
  }

  get imageUrl(): string {
    return this[2].toString();
  }
}

export class NakshMarketplace__prevBidDataResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBidder(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getTimestamp(): BigInt {
    return this.value2;
  }
}

export class NakshMarketplace__saleDataResultNftStruct extends ethereum.Tuple {
  get nftAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenUri(): string {
    return this[2].toString();
  }

  get title(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get artist(): NakshMarketplace__saleDataResultNftArtistStruct {
    return changetype<NakshMarketplace__saleDataResultNftArtistStruct>(
      this[5].toTuple()
    );
  }

  get mintedBy(): i32 {
    return this[6].toI32();
  }
}

export class NakshMarketplace__saleDataResultNftArtistStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get artistAddress(): Address {
    return this[1].toAddress();
  }

  get imageUrl(): string {
    return this[2].toString();
  }
}

export class NakshMarketplace__saleDataResult {
  value0: NakshMarketplace__saleDataResultNftStruct;
  value1: boolean;
  value2: boolean;
  value3: BigInt;
  value4: i32;

  constructor(
    value0: NakshMarketplace__saleDataResultNftStruct,
    value1: boolean,
    value2: boolean,
    value3: BigInt,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }

  getNft(): NakshMarketplace__saleDataResultNftStruct {
    return this.value0;
  }

  getIsOnSale(): boolean {
    return this.value1;
  }

  getTokenFirstSale(): boolean {
    return this.value2;
  }

  getSalePrice(): BigInt {
    return this.value3;
  }

  getSaletype(): i32 {
    return this.value4;
  }
}

export class NakshMarketplace extends ethereum.SmartContract {
  static bind(address: Address): NakshMarketplace {
    return new NakshMarketplace("NakshMarketplace", address);
  }

  Naksh_org(): Address {
    let result = super.call("Naksh_org", "Naksh_org():(address)", []);

    return result[0].toAddress();
  }

  try_Naksh_org(): ethereum.CallResult<Address> {
    let result = super.tryCall("Naksh_org", "Naksh_org():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctionData(
    param0: Address,
    param1: BigInt
  ): NakshMarketplace__auctionDataResult {
    let result = super.call(
      "auctionData",
      "auctionData(address,uint256):(uint256,uint256,uint256,address,uint256,uint256,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new NakshMarketplace__auctionDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress()
    );
  }

  try_auctionData(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<NakshMarketplace__auctionDataResult> {
    let result = super.tryCall(
      "auctionData",
      "auctionData(address,uint256):(uint256,uint256,uint256,address,uint256,uint256,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NakshMarketplace__auctionDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress()
      )
    );
  }

  getBidHistory(
    _nftAddress: Address,
    _tokenId: BigInt
  ): Array<NakshMarketplace__getBidHistoryResultValue0Struct> {
    let result = super.call(
      "getBidHistory",
      "getBidHistory(address,uint256):((address,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toTupleArray<
      NakshMarketplace__getBidHistoryResultValue0Struct
    >();
  }

  try_getBidHistory(
    _nftAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<
    Array<NakshMarketplace__getBidHistoryResultValue0Struct>
  > {
    let result = super.tryCall(
      "getBidHistory",
      "getBidHistory(address,uint256):((address,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NakshMarketplace__getBidHistoryResultValue0Struct>()
    );
  }

  getNFTonSale(): Array<NakshMarketplace__getNFTonSaleResultValue0Struct> {
    let result = super.call(
      "getNFTonSale",
      "getNFTonSale():(((address,uint256,string,string,string,(string,address,string),uint8),bool,bool,uint256,uint8)[])",
      []
    );

    return result[0].toTupleArray<
      NakshMarketplace__getNFTonSaleResultValue0Struct
    >();
  }

  try_getNFTonSale(): ethereum.CallResult<
    Array<NakshMarketplace__getNFTonSaleResultValue0Struct>
  > {
    let result = super.tryCall(
      "getNFTonSale",
      "getNFTonSale():(((address,uint256,string,string,string,(string,address,string),uint8),bool,bool,uint256,uint8)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NakshMarketplace__getNFTonSaleResultValue0Struct>()
    );
  }

  getSaleData(
    _nft: Address,
    _tokenId: BigInt
  ): NakshMarketplace__getSaleDataResultValue0Struct {
    let result = super.call(
      "getSaleData",
      "getSaleData(address,uint256):(((address,uint256,string,string,string,(string,address,string),uint8),bool,bool,uint256,uint8))",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return changetype<NakshMarketplace__getSaleDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSaleData(
    _nft: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<NakshMarketplace__getSaleDataResultValue0Struct> {
    let result = super.tryCall(
      "getSaleData",
      "getSaleData(address,uint256):(((address,uint256,string,string,string,(string,address,string),uint8),bool,bool,uint256,uint8))",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NakshMarketplace__getSaleDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getSalePrice(_nft: Address, _tokenId: BigInt): BigInt {
    let result = super.call(
      "getSalePrice",
      "getSalePrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSalePrice(
    _nft: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSalePrice",
      "getSalePrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTokenFirstSale(_nftAddress: Address, _tokenId: BigInt): boolean {
    let result = super.call(
      "isTokenFirstSale",
      "isTokenFirstSale(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTokenFirstSale(
    _nftAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenFirstSale",
      "isTokenFirstSale(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prevBidData(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): NakshMarketplace__prevBidDataResult {
    let result = super.call(
      "prevBidData",
      "prevBidData(address,uint256,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new NakshMarketplace__prevBidDataResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_prevBidData(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<NakshMarketplace__prevBidDataResult> {
    let result = super.tryCall(
      "prevBidData",
      "prevBidData(address,uint256,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NakshMarketplace__prevBidDataResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  saleData(param0: Address, param1: BigInt): NakshMarketplace__saleDataResult {
    let result = super.call(
      "saleData",
      "saleData(address,uint256):((address,uint256,string,string,string,(string,address,string),uint8),bool,bool,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return changetype<NakshMarketplace__saleDataResult>(
      new NakshMarketplace__saleDataResult(
        changetype<NakshMarketplace__saleDataResultNftStruct>(
          result[0].toTuple()
        ),
        result[1].toBoolean(),
        result[2].toBoolean(),
        result[3].toBigInt(),
        result[4].toI32()
      )
    );
  }

  try_saleData(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<NakshMarketplace__saleDataResult> {
    let result = super.tryCall(
      "saleData",
      "saleData(address,uint256):((address,uint256,string,string,string,(string,address,string),uint8),bool,bool,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NakshMarketplace__saleDataResult>(
        new NakshMarketplace__saleDataResult(
          changetype<NakshMarketplace__saleDataResultNftStruct>(
            value[0].toTuple()
          ),
          value[1].toBoolean(),
          value[2].toBoolean(),
          value[3].toBigInt(),
          value[4].toI32()
        )
      )
    );
  }

  startAuction(
    _nftAddress: Address,
    _tokenId: BigInt,
    _price: BigInt,
    _auctionTime: BigInt
  ): boolean {
    let result = super.call(
      "startAuction",
      "startAuction(address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_auctionTime)
      ]
    );

    return result[0].toBoolean();
  }

  try_startAuction(
    _nftAddress: Address,
    _tokenId: BigInt,
    _price: BigInt,
    _auctionTime: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "startAuction",
      "startAuction(address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_auctionTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyTokenOnSaleCall extends ethereum.Call {
  get inputs(): BuyTokenOnSaleCall__Inputs {
    return new BuyTokenOnSaleCall__Inputs(this);
  }

  get outputs(): BuyTokenOnSaleCall__Outputs {
    return new BuyTokenOnSaleCall__Outputs(this);
  }
}

export class BuyTokenOnSaleCall__Inputs {
  _call: BuyTokenOnSaleCall;

  constructor(call: BuyTokenOnSaleCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BuyTokenOnSaleCall__Outputs {
  _call: BuyTokenOnSaleCall;

  constructor(call: BuyTokenOnSaleCall) {
    this._call = call;
  }
}

export class CancelSaleCall extends ethereum.Call {
  get inputs(): CancelSaleCall__Inputs {
    return new CancelSaleCall__Inputs(this);
  }

  get outputs(): CancelSaleCall__Outputs {
    return new CancelSaleCall__Outputs(this);
  }
}

export class CancelSaleCall__Inputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelSaleCall__Outputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }
}

export class ChangeOrgAddressCall extends ethereum.Call {
  get inputs(): ChangeOrgAddressCall__Inputs {
    return new ChangeOrgAddressCall__Inputs(this);
  }

  get outputs(): ChangeOrgAddressCall__Outputs {
    return new ChangeOrgAddressCall__Outputs(this);
  }
}

export class ChangeOrgAddressCall__Inputs {
  _call: ChangeOrgAddressCall;

  constructor(call: ChangeOrgAddressCall) {
    this._call = call;
  }

  get _newOrg(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOrgAddressCall__Outputs {
  _call: ChangeOrgAddressCall;

  constructor(call: ChangeOrgAddressCall) {
    this._call = call;
  }
}

export class ChangePriceCall extends ethereum.Call {
  get inputs(): ChangePriceCall__Inputs {
    return new ChangePriceCall__Inputs(this);
  }

  get outputs(): ChangePriceCall__Outputs {
    return new ChangePriceCall__Outputs(this);
  }
}

export class ChangePriceCall__Inputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangePriceCall__Outputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }
}

export class EndAuctionCall extends ethereum.Call {
  get inputs(): EndAuctionCall__Inputs {
    return new EndAuctionCall__Inputs(this);
  }

  get outputs(): EndAuctionCall__Outputs {
    return new EndAuctionCall__Outputs(this);
  }
}

export class EndAuctionCall__Inputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EndAuctionCall__Outputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSaleCall extends ethereum.Call {
  get inputs(): SetSaleCall__Inputs {
    return new SetSaleCall__Inputs(this);
  }

  get outputs(): SetSaleCall__Outputs {
    return new SetSaleCall__Outputs(this);
  }
}

export class SetSaleCall__Inputs {
  _call: SetSaleCall;

  constructor(call: SetSaleCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetSaleCall__Outputs {
  _call: SetSaleCall;

  constructor(call: SetSaleCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _auctionTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
