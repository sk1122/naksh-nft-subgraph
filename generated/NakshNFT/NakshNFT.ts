// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DelistCreator extends ethereum.Event {
  get params(): DelistCreator__Params {
    return new DelistCreator__Params(this);
  }
}

export class DelistCreator__Params {
  _event: DelistCreator;

  constructor(event: DelistCreator) {
    this._event = event;
  }

  get _creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get title(): string {
    return this._event.parameters[3].value.toString();
  }

  get description(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class OwnershipGranted extends ethereum.Event {
  get params(): OwnershipGranted__Params {
    return new OwnershipGranted__Params(this);
  }
}

export class OwnershipGranted__Params {
  _event: OwnershipGranted;

  constructor(event: OwnershipGranted) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WhitelistCreator extends ethereum.Event {
  get params(): WhitelistCreator__Params {
    return new WhitelistCreator__Params(this);
  }
}

export class WhitelistCreator__Params {
  _event: WhitelistCreator;

  constructor(event: WhitelistCreator) {
    this._event = event;
  }

  get _creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NakshNFT__fetchArtistResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get artistAddress(): Address {
    return this[1].toAddress();
  }

  get imageUrl(): string {
    return this[2].toString();
  }
}

export class NakshNFT__getCollectionDetailsResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get about(): string {
    return this[2].toString();
  }

  get logo(): string {
    return this[3].toString();
  }

  get cover(): NakshNFT__getCollectionDetailsResultValue0CoverStruct {
    return changetype<NakshNFT__getCollectionDetailsResultValue0CoverStruct>(
      this[4].toTuple()
    );
  }

  get social(): NakshNFT__getCollectionDetailsResultValue0SocialStruct {
    return changetype<NakshNFT__getCollectionDetailsResultValue0SocialStruct>(
      this[5].toTuple()
    );
  }
}

export class NakshNFT__getCollectionDetailsResultValue0CoverStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get isGradient(): boolean {
    return this[1].toBoolean();
  }
}

export class NakshNFT__getCollectionDetailsResultValue0SocialStruct extends ethereum.Tuple {
  get instagram(): string {
    return this[0].toString();
  }

  get facebook(): string {
    return this[1].toString();
  }

  get twitter(): string {
    return this[2].toString();
  }

  get website(): string {
    return this[3].toString();
  }
}

export class NakshNFT__getNFTDataResultValue0Struct extends ethereum.Tuple {
  get nftAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenUri(): string {
    return this[2].toString();
  }

  get title(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get artist(): NakshNFT__getNFTDataResultValue0ArtistStruct {
    return changetype<NakshNFT__getNFTDataResultValue0ArtistStruct>(
      this[5].toTuple()
    );
  }

  get mintedBy(): i32 {
    return this[6].toI32();
  }
}

export class NakshNFT__getNFTDataResultValue0ArtistStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get artistAddress(): Address {
    return this[1].toAddress();
  }

  get imageUrl(): string {
    return this[2].toString();
  }
}

export class NakshNFT__getRoyaltiesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_orgFee(): BigInt {
    return this.value0;
  }

  get_creatorRoyalty(): BigInt {
    return this.value1;
  }

  get_orgInitialRoyalty(): BigInt {
    return this.value2;
  }

  get_sellerFeeInitial(): BigInt {
    return this.value3;
  }
}

export class NakshNFT__nftDataResultArtistStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get artistAddress(): Address {
    return this[1].toAddress();
  }

  get imageUrl(): string {
    return this[2].toString();
  }
}

export class NakshNFT__nftDataResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: string;
  value4: string;
  value5: NakshNFT__nftDataResultArtistStruct;
  value6: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: string,
    value4: string,
    value5: NakshNFT__nftDataResultArtistStruct,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromTuple(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }

  getNftAddress(): Address {
    return this.value0;
  }

  getTokenId(): BigInt {
    return this.value1;
  }

  getTokenUri(): string {
    return this.value2;
  }

  getTitle(): string {
    return this.value3;
  }

  getDescription(): string {
    return this.value4;
  }

  getArtist(): NakshNFT__nftDataResultArtistStruct {
    return this.value5;
  }

  getMintedBy(): i32 {
    return this.value6;
  }
}

export class NakshNFT extends ethereum.SmartContract {
  static bind(address: Address): NakshNFT {
    return new NakshNFT("NakshNFT", address);
  }

  TotalSplits(): BigInt {
    let result = super.call("TotalSplits", "TotalSplits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TotalSplits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TotalSplits", "TotalSplits():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bulkMintByAdmin(
    _creator: Address,
    _tokenURI: Array<string>,
    title: Array<string>,
    description: Array<string>,
    artistName: string
  ): Array<BigInt> {
    let result = super.call(
      "bulkMintByAdmin",
      "bulkMintByAdmin(address,string[],string[],string[],string):(uint256[])",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromStringArray(_tokenURI),
        ethereum.Value.fromStringArray(title),
        ethereum.Value.fromStringArray(description),
        ethereum.Value.fromString(artistName)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_bulkMintByAdmin(
    _creator: Address,
    _tokenURI: Array<string>,
    title: Array<string>,
    description: Array<string>,
    artistName: string
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "bulkMintByAdmin",
      "bulkMintByAdmin(address,string[],string[],string[],string):(uint256[])",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromStringArray(_tokenURI),
        ethereum.Value.fromStringArray(title),
        ethereum.Value.fromStringArray(description),
        ethereum.Value.fromString(artistName)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  bulkMintByArtist(
    _tokenURI: Array<string>,
    title: Array<string>,
    description: Array<string>,
    artistName: string
  ): Array<BigInt> {
    let result = super.call(
      "bulkMintByArtist",
      "bulkMintByArtist(string[],string[],string[],string):(uint256[])",
      [
        ethereum.Value.fromStringArray(_tokenURI),
        ethereum.Value.fromStringArray(title),
        ethereum.Value.fromStringArray(description),
        ethereum.Value.fromString(artistName)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_bulkMintByArtist(
    _tokenURI: Array<string>,
    title: Array<string>,
    description: Array<string>,
    artistName: string
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "bulkMintByArtist",
      "bulkMintByArtist(string[],string[],string[],string):(uint256[])",
      [
        ethereum.Value.fromStringArray(_tokenURI),
        ethereum.Value.fromStringArray(title),
        ethereum.Value.fromStringArray(description),
        ethereum.Value.fromString(artistName)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  creatorFees(param0: BigInt): i32 {
    let result = super.call("creatorFees", "creatorFees(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_creatorFees(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("creatorFees", "creatorFees(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  creatorWhitelist(param0: Address): boolean {
    let result = super.call(
      "creatorWhitelist",
      "creatorWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_creatorWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "creatorWhitelist",
      "creatorWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  creators(param0: BigInt): Address {
    let result = super.call("creators", "creators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_creators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("creators", "creators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchArtist(_artist: Address): NakshNFT__fetchArtistResultValue0Struct {
    let result = super.call(
      "fetchArtist",
      "fetchArtist(address):((string,address,string))",
      [ethereum.Value.fromAddress(_artist)]
    );

    return changetype<NakshNFT__fetchArtistResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_fetchArtist(
    _artist: Address
  ): ethereum.CallResult<NakshNFT__fetchArtistResultValue0Struct> {
    let result = super.tryCall(
      "fetchArtist",
      "fetchArtist(address):((string,address,string))",
      [ethereum.Value.fromAddress(_artist)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NakshNFT__fetchArtistResultValue0Struct>(value[0].toTuple())
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollectionDetails(): NakshNFT__getCollectionDetailsResultValue0Struct {
    let result = super.call(
      "getCollectionDetails",
      "getCollectionDetails():((string,string,string,string,(string,bool),(string,string,string,string)))",
      []
    );

    return changetype<NakshNFT__getCollectionDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCollectionDetails(): ethereum.CallResult<
    NakshNFT__getCollectionDetailsResultValue0Struct
  > {
    let result = super.tryCall(
      "getCollectionDetails",
      "getCollectionDetails():((string,string,string,string,(string,bool),(string,string,string,string)))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NakshNFT__getCollectionDetailsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getCreatorFees(): Array<i32> {
    let result = super.call(
      "getCreatorFees",
      "getCreatorFees():(uint16[])",
      []
    );

    return result[0].toI32Array();
  }

  try_getCreatorFees(): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "getCreatorFees",
      "getCreatorFees():(uint16[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getNFTData(_tokenId: BigInt): NakshNFT__getNFTDataResultValue0Struct {
    let result = super.call(
      "getNFTData",
      "getNFTData(uint256):((address,uint256,string,string,string,(string,address,string),uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return changetype<NakshNFT__getNFTDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getNFTData(
    _tokenId: BigInt
  ): ethereum.CallResult<NakshNFT__getNFTDataResultValue0Struct> {
    let result = super.tryCall(
      "getNFTData",
      "getNFTData(uint256):((address,uint256,string,string,string,(string,address,string),uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NakshNFT__getNFTDataResultValue0Struct>(value[0].toTuple())
    );
  }

  getRoyalties(): NakshNFT__getRoyaltiesResult {
    let result = super.call(
      "getRoyalties",
      "getRoyalties():(uint256,uint256,uint256,uint256)",
      []
    );

    return new NakshNFT__getRoyaltiesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getRoyalties(): ethereum.CallResult<NakshNFT__getRoyaltiesResult> {
    let result = super.tryCall(
      "getRoyalties",
      "getRoyalties():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NakshNFT__getRoyaltiesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getSellerFee(): BigInt {
    let result = super.call("getSellerFee", "getSellerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSellerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSellerFee", "getSellerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalCreatorFees(): BigInt {
    let result = super.call(
      "getTotalCreatorFees",
      "getTotalCreatorFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalCreatorFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalCreatorFees",
      "getTotalCreatorFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintByArtistOrAdmin(
    _creator: Address,
    _tokenURI: string,
    title: string,
    description: string,
    artistName: string
  ): BigInt {
    let result = super.call(
      "mintByArtistOrAdmin",
      "mintByArtistOrAdmin(address,string,string,string,string):(uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(description),
        ethereum.Value.fromString(artistName)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintByArtistOrAdmin(
    _creator: Address,
    _tokenURI: string,
    title: string,
    description: string,
    artistName: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintByArtistOrAdmin",
      "mintByArtistOrAdmin(address,string,string,string,string):(uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(description),
        ethereum.Value.fromString(artistName)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftData(param0: BigInt): NakshNFT__nftDataResult {
    let result = super.call(
      "nftData",
      "nftData(uint256):(address,uint256,string,string,string,(string,address,string),uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NakshNFT__nftDataResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      changetype<NakshNFT__nftDataResultArtistStruct>(result[5].toTuple()),
      result[6].toI32()
    );
  }

  try_nftData(param0: BigInt): ethereum.CallResult<NakshNFT__nftDataResult> {
    let result = super.tryCall(
      "nftData",
      "nftData(uint256):(address,uint256,string,string,string,(string,address,string),uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NakshNFT__nftDataResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        changetype<NakshNFT__nftDataResultArtistStruct>(value[5].toTuple()),
        value[6].toI32()
      )
    );
  }

  orgFee(): BigInt {
    let result = super.call("orgFee", "orgFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_orgFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("orgFee", "orgFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orgFeeInitial(): BigInt {
    let result = super.call("orgFeeInitial", "orgFeeInitial():(uint256)", []);

    return result[0].toBigInt();
  }

  try_orgFeeInitial(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "orgFeeInitial",
      "orgFeeInitial():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellerFee(): BigInt {
    let result = super.call("sellerFee", "sellerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sellerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellerFee", "sellerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellerFeeInitial(): BigInt {
    let result = super.call(
      "sellerFeeInitial",
      "sellerFeeInitial():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sellerFeeInitial(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellerFeeInitial",
      "sellerFeeInitial():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setRoyaltyPercentageFirstSale(
    _orgFeeInitial: BigInt,
    _creatorFeeInitial: BigInt
  ): boolean {
    let result = super.call(
      "setRoyaltyPercentageFirstSale",
      "setRoyaltyPercentageFirstSale(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_orgFeeInitial),
        ethereum.Value.fromUnsignedBigInt(_creatorFeeInitial)
      ]
    );

    return result[0].toBoolean();
  }

  try_setRoyaltyPercentageFirstSale(
    _orgFeeInitial: BigInt,
    _creatorFeeInitial: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setRoyaltyPercentageFirstSale",
      "setRoyaltyPercentageFirstSale(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_orgFeeInitial),
        ethereum.Value.fromUnsignedBigInt(_creatorFeeInitial)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalCreatorFees(): BigInt {
    let result = super.call(
      "totalCreatorFees",
      "totalCreatorFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCreatorFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCreatorFees",
      "totalCreatorFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get artist(): ConstructorCallArtistStruct {
    return changetype<ConstructorCallArtistStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get collection(): ConstructorCallCollectionStruct {
    return changetype<ConstructorCallCollectionStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _creatorFees(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get _creators(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }

  get _totalCreatorFees(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallArtistStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get artistAddress(): Address {
    return this[1].toAddress();
  }

  get imageUrl(): string {
    return this[2].toString();
  }
}

export class ConstructorCallCollectionStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get about(): string {
    return this[2].toString();
  }

  get logo(): string {
    return this[3].toString();
  }

  get cover(): ConstructorCallCollectionCoverStruct {
    return changetype<ConstructorCallCollectionCoverStruct>(this[4].toTuple());
  }

  get social(): ConstructorCallCollectionSocialStruct {
    return changetype<ConstructorCallCollectionSocialStruct>(this[5].toTuple());
  }
}

export class ConstructorCallCollectionCoverStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get isGradient(): boolean {
    return this[1].toBoolean();
  }
}

export class ConstructorCallCollectionSocialStruct extends ethereum.Tuple {
  get instagram(): string {
    return this[0].toString();
  }

  get facebook(): string {
    return this[1].toString();
  }

  get twitter(): string {
    return this[2].toString();
  }

  get website(): string {
    return this[3].toString();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BulkMintByAdminCall extends ethereum.Call {
  get inputs(): BulkMintByAdminCall__Inputs {
    return new BulkMintByAdminCall__Inputs(this);
  }

  get outputs(): BulkMintByAdminCall__Outputs {
    return new BulkMintByAdminCall__Outputs(this);
  }
}

export class BulkMintByAdminCall__Inputs {
  _call: BulkMintByAdminCall;

  constructor(call: BulkMintByAdminCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenURI(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get title(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get description(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get artistName(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class BulkMintByAdminCall__Outputs {
  _call: BulkMintByAdminCall;

  constructor(call: BulkMintByAdminCall) {
    this._call = call;
  }

  get _tokenId(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class BulkMintByArtistCall extends ethereum.Call {
  get inputs(): BulkMintByArtistCall__Inputs {
    return new BulkMintByArtistCall__Inputs(this);
  }

  get outputs(): BulkMintByArtistCall__Outputs {
    return new BulkMintByArtistCall__Outputs(this);
  }
}

export class BulkMintByArtistCall__Inputs {
  _call: BulkMintByArtistCall;

  constructor(call: BulkMintByArtistCall) {
    this._call = call;
  }

  get _tokenURI(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get title(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get description(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get artistName(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class BulkMintByArtistCall__Outputs {
  _call: BulkMintByArtistCall;

  constructor(call: BulkMintByArtistCall) {
    this._call = call;
  }

  get _tokenId(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClaimContractOwnershipCall extends ethereum.Call {
  get inputs(): ClaimContractOwnershipCall__Inputs {
    return new ClaimContractOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimContractOwnershipCall__Outputs {
    return new ClaimContractOwnershipCall__Outputs(this);
  }
}

export class ClaimContractOwnershipCall__Inputs {
  _call: ClaimContractOwnershipCall;

  constructor(call: ClaimContractOwnershipCall) {
    this._call = call;
  }
}

export class ClaimContractOwnershipCall__Outputs {
  _call: ClaimContractOwnershipCall;

  constructor(call: ClaimContractOwnershipCall) {
    this._call = call;
  }
}

export class GrantAdminRightsCall extends ethereum.Call {
  get inputs(): GrantAdminRightsCall__Inputs {
    return new GrantAdminRightsCall__Inputs(this);
  }

  get outputs(): GrantAdminRightsCall__Outputs {
    return new GrantAdminRightsCall__Outputs(this);
  }
}

export class GrantAdminRightsCall__Inputs {
  _call: GrantAdminRightsCall;

  constructor(call: GrantAdminRightsCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantAdminRightsCall__Outputs {
  _call: GrantAdminRightsCall;

  constructor(call: GrantAdminRightsCall) {
    this._call = call;
  }
}

export class GrantContractOwnershipCall extends ethereum.Call {
  get inputs(): GrantContractOwnershipCall__Inputs {
    return new GrantContractOwnershipCall__Inputs(this);
  }

  get outputs(): GrantContractOwnershipCall__Outputs {
    return new GrantContractOwnershipCall__Outputs(this);
  }
}

export class GrantContractOwnershipCall__Inputs {
  _call: GrantContractOwnershipCall;

  constructor(call: GrantContractOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantContractOwnershipCall__Outputs {
  _call: GrantContractOwnershipCall;

  constructor(call: GrantContractOwnershipCall) {
    this._call = call;
  }
}

export class MintByArtistOrAdminCall extends ethereum.Call {
  get inputs(): MintByArtistOrAdminCall__Inputs {
    return new MintByArtistOrAdminCall__Inputs(this);
  }

  get outputs(): MintByArtistOrAdminCall__Outputs {
    return new MintByArtistOrAdminCall__Outputs(this);
  }
}

export class MintByArtistOrAdminCall__Inputs {
  _call: MintByArtistOrAdminCall;

  constructor(call: MintByArtistOrAdminCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get title(): string {
    return this._call.inputValues[2].value.toString();
  }

  get description(): string {
    return this._call.inputValues[3].value.toString();
  }

  get artistName(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class MintByArtistOrAdminCall__Outputs {
  _call: MintByArtistOrAdminCall;

  constructor(call: MintByArtistOrAdminCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetRoyaltyPercentageFirstSaleCall extends ethereum.Call {
  get inputs(): SetRoyaltyPercentageFirstSaleCall__Inputs {
    return new SetRoyaltyPercentageFirstSaleCall__Inputs(this);
  }

  get outputs(): SetRoyaltyPercentageFirstSaleCall__Outputs {
    return new SetRoyaltyPercentageFirstSaleCall__Outputs(this);
  }
}

export class SetRoyaltyPercentageFirstSaleCall__Inputs {
  _call: SetRoyaltyPercentageFirstSaleCall;

  constructor(call: SetRoyaltyPercentageFirstSaleCall) {
    this._call = call;
  }

  get _orgFeeInitial(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _creatorFeeInitial(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRoyaltyPercentageFirstSaleCall__Outputs {
  _call: SetRoyaltyPercentageFirstSaleCall;

  constructor(call: SetRoyaltyPercentageFirstSaleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
